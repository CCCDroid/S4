S4 examples:

 - To enter a comment: 
    0( here is a comment )
  
  - if (c) { print("Yes") } else { print("No") }
    C #("Yes"#=)0=("No")

 - x = (a == b) ? c : d;
    A B = #(C$)0=(D) X;

 - To conditionally define a function: 
    1( {xx "xx will be defined"} )
    0( {yy "yy will not be defined"} )

- To make sure F < T
     S4 code:             %%>($)
     Forth equivalent:    OVER OVER > IF SWAP THEN
     C equivalent:        if (f > t) { int x = f; f = t; t = x; }

- To do something (in this case, call :lp) N times:
    S4 code:             N[[:lp 1-]]

 - To print numbers from 10 to 20:
    S4 code:             10 20[xI.b]
    Forth equivalent:    10 20 FOR I . NEXT
    C equivalent:        for (int i = 10; i <= 20; i)) { printf("%d ", i); }

- One way to copy N bytes from A to B
    0( 300: copy bytes [n f t--])
    {300 D;S; 1[S+ c@ D+ c!]}
    NAB:300

- One way to copy N longs from A to B
    0( 301: copy longs [n f t--])
    {301 D;S; 1[S+ @ D+ !]}
    NAB:301

- A simple benchmark for a 100 million decrement loop:
    {101 %%/*-}                   0(define function 101 - MODULO)
    {103 #100<(0.)#10<(0.).}      0(define function 103 - .w with 0 pad to 3)
    {105 t$-1000%%/.".":101:103}  0(define function 105 - ELAPSED)
    {661 t$[[1-]]:105}
    {662 t$1[]:105}
    1000#* 100* # :661b:662

- One way to display the currently defined code:
    0 H 1-[ xI d@ #, h7D=(n) ]

- To exit S4:
    xT
