S4 examples:

 - To enter a comment: 
    0( here is a comment )
  
  - if (c) { ys() } else { no() } then:
    c #(:ys #=)0=(:no)

 - x = (a == b) ? c : d;
    A B = #(C$)0=(D) _X

 - To conditionally define a function: 
    1( {xx "xx will be defined"} )
    0( {yy "yy will not be defined"} )

- To make sure N < T
     S4 code:             %%>($)
     Forth equivalent:    OVER OVER > IF SWAP THEN
     C equivalent:        if (f < t) { int x = f; f = t; t = x; }

- The general form for a FOR loop is:
    0(f t--)   %%>($)%-1+[$    0(code)    1+$1-]\

- To do something 41 times:
    S4 code:             1 41 %-1+[$   0(code here-->)#b.0(<--code here)   1+$1-]\
    Forth equivalent:    1 41 FOR I . NEXT
    C equivalent:        for (int i = 1; i <= 41; i)) { printf("%d ", i); }

- To copy 927 bytes from 1000 to 2000
    0( cb: copy bytes [n f t--])
    {cb _D _S [S+ c@ D+ c! 1-]}
    927 1000 2000 :cb

- To copy 927 longs from 1000 to 2000
    0( cl: copy longs [n f t--])
    {cb _D _S [S+ @ D+ ! 1-]}
    927 1000 2000 :cl

- A simple benchmark for a 100 million decrement loop:
    {md %%/*-}                   0(define function md - MODULO)
    {n3 #100<(0.)#10<(0.).}      0(define function n3)
    {el t$-1000%%/.".":md:n3}    0(define function el - ELAPSED)
    {bm t$[1-]:el}
    1000#* 100* :bm

- To display the currently defined code:
    0 H@[$   #c@#,h7d=(r)   1+$1-]\

- To exit S4:
    xZ
