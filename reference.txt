************************************
*     S4 Reference                 *
************************************

*** ARITHMETIC ***
+  (a b--a+b)     addition
-  (a b--a-b)     subtraction
*  (a b--a*b)     multiplication
/  (a b--a/b)     division

*** BIT MANIPULATION ***
&  (a b--n)       32-bit and
|  (a b--n)       32-bit or
^  (a b--n)       32-bit xor
~  (n1--n2)       not, all bits reversed (0110010 => 1001101)
_  (n1--n2)       negate TOS (17 => -17) (same as ~1+)

*** STACK ***
#  (a--a a)       Duplicate TOS (Forth DUP)
\  (a b--a)       Drop TOS (Forth DROP)
$  (a b--b a)     Swap top 2 stack items (Forth SWAP)
%  (a b--a b a)   Push 2nd (Forth OVER)

*** MEMORY ***
  NOTE: There are 2 separate address spaces, CODE and MEMORY
        The MEMORY address space is NOT shared with the CODE space
        c@ and d@ use 8-bit indexing, @ uses 32-bit indexing
        For example, 28c@ returns the lowest byte of HERE, 
                       7@ returns HERE as a 32-bit number
@     (a--n)       Fetch value from MEMORY address a (32-bit indexing)
!     (n a--)      Store value to   MEMORY address a (32-bit indexing)
c@    (a--n)       Fetch value from MEMORY address a ( 8-bit indexing)
c!    (n a--)      Store value to   MEMORY address a ( 8-bit indexing)
d@    (a--n)       Fetch value from CODE address a
d!    (n a--)      Store value to   CODE address a

*** REGISTERS ***
  NOTES: The registers are shortcuts for 32-bit addresses [0..25]
         Register A is [0], M is [12], Z is [25]
         Register H is special: it is the HERE address
X   (--a)         Push address of register X (X:[A..Z])
X+  (--a)         Push address of register X and increment X by 1
X-  (--a)         Push address of register X and decrement X by 1

*** FUNCTIONS ***
  NOTES: 1) Function names can start with a number [0..9]
         2) The alpha characters in the function name are not case-sensitive
         3) A function cannot have '}' embedded in it (eg - {bd "TE}ST"} will not compile correctly)
            Use {ok "TE"125,"ST"} instead
{XX  (--)         Define function XX (XX:aa..99)
}    (--)         End of function definition
:xx  (--)         Call function xx
;    (--)         Return from function immediately (i.e. - before reaching '}')
                    NOTE: returning while inside of a loop is not supported; behavior will be undefined.

*** INPUT/OUTPUT ***
r     (--)        Output a CR/LF (13,10,)
b     (--)        Output a SPACE (32,)
.     (n--)       Output TOS as decimal number
,     (n--)       Output TOS (27 is ESC, 10 is newline, 65 is A, etc) (Forth emit)
?     ( --key)    Read one key, don't wait for ENTER.
"     (--)        Output bytes until next '"'
hX    (--n)       Scan HEX number (X) until non hex-digit (not case-sensitive h3Da0 == h3dA0 )
0..9  (--n)       Scan DECIMAL number until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use _ (negate) after the number (eg - '32_')
'x   (--n)        Push the ascii value of x (x: [any char possible])

*** CONDITIONS/FLOW CONTROL ***
<   (a b--f)      if (a < b), f=true, else f=false
>   (a b--f)      if (a > b), f=true, else f=false
=   (a b--f)      if (a = b), f=true, else f=false
(   (f--)         if (f != 0), execute code in '()', if false skip until ')'
          NOTES: 1. You can NOT nest IFs
                 2. '()' cannot have ')' embedded in in (EG - a@("TE)ST"1-) fails when a=0)
                    USE a@("TE"41,"ST") instead
[   (f--f)        Begin while loop. If (f==0), skip code until ']'
]   (f--)         if (f != 0), repeat the loop. Else, drop f and continue.
          NOTES: 1. You can NOT nest LOOPs
                 2. '[]' cannot have ']' embedded in it (EG - a@["TE]ST"1-] fails when a=0)
                    USE a@("TE"93,"ST") instead

*** OTHER ***
iA    (--)         Info: All (CFMRS)
iC    (--)         Info: Code
iF    (--)         Info: Functions
iM    (--)         Info: Memory
iR    (--)         Info: Registers
iS    (--)         Info: Stack
l     (n--)        Load code from block (block.nnn)
t     (--n)        Time (Arduino: millis(), Windows: GetTickCount())
w     (n--)        Wait (Arduino: delay(),  Windows: Sleep())
xA    (a--)        Call code at address A
xX    (--)         Reset S4 to initial state
xZ    (--)         Exit S4

*** EXTENDED OPCODES ***
`FOA  (n--f)       File: open for appending (block.n)
`FOR  (n--f)       File: open for reading (block.n)
`FOW  (n--f)       File: open for writing (block.n)
`FC   (f--)        File: close
`FR   (f--c)       File: read 1 char
`FW   (c f--)      File: write 1 char
`PI   (p--)        Arduino: pinMode(p, INPUT)
`PU   (p--)        Arduino: pinMode(p, INPUT_PULLUP)
`PO   (p--)        Arduino: pinMode(p, OUTPUT)
`PRA  (p--n)       Arduino: read analog pin (v = analogRead(p))
`PRD  (p--n)       Arduino: read digital pin (n = digitalRead(p))
`PWA  (v p--)      Arduino: write to analog pin (analogWrite(p, v))
`PWD  (v p--)      Arduino: write to digital pin (digitalWrite(p, v))
